generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique
  phone       String        @unique
  imageUrl    String?       @db.Text
  bio         String?       @db.Text
  lastSeen    DateTime      @default(now())
  contacts    Contact[]     @relation("UserToContacts")
  addedBy     Contact[]     @relation("ContactToUser")
  messages    Message[]
  groups      GroupMember[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ChatMember  ChatMember[]
  ReadReceipt ReadReceipt[]
}

model Contact {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserToContacts", fields: [userId], references: [id], onDelete: Cascade)
  contactId String
  contact   User     @relation("ContactToUser", fields: [contactId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, contactId])
  @@index([contactId])
  @@index([userId])
}

model Chat {
  id            String       @id @default(uuid())
  isGroup       Boolean      @default(false)
  users         ChatMember[]
  messages      Message[]
  lastMessageAt DateTime     @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Group     Group[]
}

model ChatMember {
  id      String  @id @default(uuid())
  chatId  String
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin Boolean @default(false)

  @@unique([chatId, userId])
  @@index([userId])
  @@index([chatId])
}

model Message {
  id        String        @id @default(uuid())
  content   String?       @db.Text
  fileUrl   String?       @db.Text
  senderId  String
  sender    User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId    String
  chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  deleted   Boolean       @default(false)
  readBy    ReadReceipt[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([chatId])
  @@index([senderId])
}

model ReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@index([userId])
}

model Group {
  id        String        @id @default(uuid())
  name      String
  imageUrl  String?       @db.Text
  chatId    String
  chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  members   GroupMember[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([chatId])
}

model GroupMember {
  id      String  @id @default(uuid())
  groupId String
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin Boolean @default(false)

  @@unique([groupId, userId])
  @@index([userId])
}
